fun(x[i, ])
})
return(sd(th))
}
for (b in 1:B) {
j <- sample(1:n, size = n, replace = TRUE)
y <- x[j, ]
stat[b] <- statistic(y)
se[b] <- boot.se(y, R = R, fun = statistic)
}
stat0 <- statistic(x) #original statistic
t.stats <- (stat - stat0) / se
se0 <- sd(stat)
alpha <- 1 - level
Qt <- quantile(t.stats, c(alpha/2, 1-alpha/2), type = 1)
names(Qt) <- rev(names(Qt))
CI <- rev(stat0 - Qt * se0)
}
boot.t.ci <-
function(x, B = 500, R = 100, level = .95, statistic){
#compute the bootstrap t CI
x <- as.matrix(x)
n <- nrow(x)
stat <- numeric(B)
se <- numeric(B)
boot.se <- function(x, R, fun) {
#local function to compute the bootstrap
#estimate of standard error for statistic f(x)
x <- as.matrix(x)
m <- nrow(x)
th <- replicate(R, expr = {
i <- sample(1:m, size = m, replace = TRUE)
fun(x[i, ])
})
return(sd(th))
}
##re-sample for
for (b in 1:B) {
j <- sample(1:n, size = n, replace = TRUE)
y <- x[j, ]
stat[b] <- statistic(y)
se[b] <- boot.se(y, R = R, fun = statistic)
}
##estimate the distribution for quantile
stat0 <- statistic(x) #original statistic
t.stats <- (stat - stat0) / se
se0 <- sd(stat)
alpha <- 1 - level
Qt <- quantile(t.stats, c(alpha/2, 1-alpha/2), type = 1)
names(Qt) <- rev(names(Qt))
CI <- rev(stat0 - Qt * se0)
}
library(bootstrap)
dat <- cbind(patch$y, patch$z)
stat <- function(dat) {
mean(dat[, 1]) / mean(dat[, 2]) }
ci <- boot.t.ci(dat, statistic = stat, B=2000, R=200)
print(ci)
boot.t.ci <-
function(x, B = 500, R = 100, level = .95, statistic){
#compute the bootstrap t CI
x <- as.matrix(x)
n <- nrow(x)
stat <- numeric(B)
se <- numeric(B)
boot.se <- function(x, R, fun) {
#local function to compute the bootstrap
#estimate of standard error for statistic f(x)
x <- as.matrix(x)
m <- nrow(x)
th <- replicate(R, expr = {
i <- sample(1:m, size = m, replace = TRUE)
fun(x[i, ])
})
return(sd(th))
}
##re-sample for
for (b in 1:B) {
j <- sample(1:n, size = n, replace = TRUE)
y <- x[j, ]
stat[b] <- statistic(y)
se[b] <- boot.se(y, R = R, fun = statistic)
}
##estimate the distribution for quantile
stat0 <- statistic(x) #original statistic
t.stats <- (stat - stat0) / se
se0 <- sd(stat)
alpha <- 1 - level
Qt <- quantile(t.stats, c(alpha/2, 1-alpha/2), type = 1)
names(Qt) <- rev(names(Qt))
CI <- rev(stat0 - Qt * se0)
return(CI)
}
##
library(bootstrap)
dat <- cbind(patch$y, patch$z)
stat <- function(dat) {
mean(dat[, 1]) / mean(dat[, 2]) }
ci <- boot.t.ci(dat, statistic = stat, B=2000, R=200)
print(ci)
law
library(bootstrap)
stat <- function(x) { cor(x[, 1], x[,2]) }
ci <- boot.t.ci(law, statistic = stat, B=2000, R=200)
print(ci)
##Exercise 7.4
library(boot)
aircondit
lambda.hat <- 1/mean(aircondit)
##MLE for lambda
lambda.hat <- 1/mean(aircondit$hours)
rexp(12,0.01)
sort(rexp(12,0.01))
sort(rexp(12,0.01))
sort(rexp(12,0.01))
sort(rexp(12,0.01))
sort(rexp(12,0.01))
mean(aircondit)
mean(aircondit$hours)
n <- nrow(aircondit)
library(boot) # get aircondit data
##MLE for lambda
lambda.hat <- 1/mean(aircondit$hours)
##initial
B <- 2000
n <- nrow(aircondit)
lambda.B <- numeric(B)
##bootstrap
for (b in 1:B) {
i <- sample(1:n, size = n, replace = TRUE)
aircondit.B <- aircondit$hours[i]
lambda.B[b] <- 1/mean(aircondit.B)
}
###estimate for bias
bias <- mean(lambda.B - lambda.hat)
bias
tau<-function(x,i){
xi<-x[i,]
cor(xi[,1],xi[,2])
}
library(boot) #for boot function
obj <- boot(data = law, statistic = tau, R = 2000)
obj
library(bootstrap)
tau<-function(x,i){
xi<-x[i,]
cor(xi[,1],xi[,2])
}
library(boot) #for boot function
obj <- boot(data = law, statistic = tau, R = 2000)
obj
aircondit[,2]
as.matrix(aircondit)
as.matrix(aircondit)[,2]
as.matrix(aircondit)[1]
a <- as.matrix(aircondit)
law
typeof(law)
mle<-function(x,i){ 1/mean(x[i]) }
library(boot) #for boot function
obj <- boot(data = aircondit, statistic = mle, R = 2000)
typeof(aircondit)
aircondit[2]
as.array(aircondit)
as.matrix(aircondit)
mle<-function(x,i){ 1/mean(x[i]) }
library(boot) #for boot function
obj <- boot(data = as.matrix(aircondit), statistic = mle, R = 2000)
obj
?boot.ci
aircondit0 <- as.matrix(aircondit)
?boot.out
aircondit0 <- as.matrix(aircondit)
mle <- function(x,i) 1/mean(x[i])
##get boot class
aircondit.boot <- boot(data = aircondit0, statistic = mle, R = 2000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
boot.ci
?norm.ci
norm.ci
longley
options(digits = 10)
aircondit0 <- as.matrix(aircondit)
mle <- function(x,i) 1/mean(x[i])
##get boot class
aircondit.boot <- boot(data = aircondit0, statistic = mle, R = 2000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
aircondit0 <- as.matrix(aircondit)
mle <- function(x,i) 1/mean(x[i])
##get boot class
aircondit.boot <- boot(data = aircondit0, statistic = mle, R = 2000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
?h
norm.ci(aircondit.boot)
norm.ci(aircondit.boot)
boot.ci
?basic.ci
aircondit.boot <- boot(data = aircondit0, statistic = mle, R = 2000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
aircondit.boot <- boot(data = aircondit0, statistic = mle, R = 5000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
aircondit0 <- as.matrix(aircondit)
meantime <- function(x,i) mean(x[i])
##get boot class
aircondit.boot <- boot(data = aircondit0, statistic = meantime, R = 5000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
library(boot)
aircondit0 <- as.matrix(aircondit)
meantime <- function(x,i) mean(x[i])
##get boot class
aircondit.boot <- boot(data = aircondit0, statistic = meantime, R = 5000)
boot.ci(aircondit.boot, type = c("norm", "basic", "perc", "bca"))
mean(aircondit0)
library(Bootstrap)
#Exercise 7.7
library(bootstrap)
scor
cov(scor)
cov(scale(scor))
Sigma.hat <- cov(scale(scor))
eigen(Sigma.hat)
eigen(cov(scor))
?scale
library(bootstrap) # get scor data
# default: perform centralized and standardized process
theta <- function(data, center = TRUE, scale = TRUE) {
Sigma.hat <-
cov(scale(as.matrix(data),center = center, scale = scale))
e.hat <- eigen(Sigma.hat) # calculate the eigenvalue and eigen-vector
## estimate the proportion of the first principal component
theta.hat <- e.hat$values[1]/sum(e.hat$values)
return(theta.hat)
}
theta.all <- theta(scor)
n <- nrow(scor)
replicate
scor[1]
scor[,1]
scor
typeof(scor)
as.matrix(scor)
as.matrix(scor)[,1]
cov(as.matrxi(scor))
cov(as.matrix(scor))
scor$mec
scor[1]
scor[,2]
scor$vec
as.matrix(scor)[,3]
law[,2]
i <- c(1,2,1,1,1)
scor[i]
scor[,i]
scor$mec[i]
scor.data <- as.matrix(scor)
scor.data[,i]
scor.data[i]
scor.data[i,]
as.matrix(scor)[i,]
## use bootstrap method
# initial
B <- 2000; n <- nrow(scor)
theta.B <- numeric(B)
# bootstrap
theta.B <- replicate(B, expr = {
i <- sample(1:n, size = n, replace = TRUE)
scor.B <- as.matrix(scor)[i,]
theta.B <- theta(scor.B)
})
bias <- mean(theta.B-theta.all)
bias <- mean(theta.B-theta.all)
std <- sd(theta.B)
print(c(bias,std))
result <- c(bias,std)
names(result) <- result
print(result)
names(result) <- name(result)
names(result) <- rev(names(result))
print(result)
names(result) <- c("bias.B", "std.B")
print(result)
bias <- mean(theta.B-theta.all)
std <- sd(theta.B)
result <- c(theta.all,bias,std)
names(result) <- c("original","bias.B", "std.B")
print(result)
##use jackknife method
# initial
n <- nrow(scor)
theta.jack <- numeric(n)
# jackknife
for (i in 1:n) {
theta.jack[i] <- theta(as.matrix(scor)[-i,])
}
theta.jack
bias.jack <- (n-1)*mean(theta.jack-theta.all)
std.jack <- sqrt((n-1)*mean((theta.jack-mean(theta.jack))^2))
result.jack <- c(theta.all,bias.jack,std.jack)
names(result.jack) <- c("original","bias.jack", "std.jack")
print(result.jack)
par(ask = TRUE)
library(DAAG); attach(ironslag)
a <- seq(10, 40, .1) #sequence for plotting fits
L1 <- lm(magnetic ~ chemical)
plot(chemical, magnetic, main="Linear", pch=16)
yhat1 <- L1$coef[1] + L1$coef[2] * a
lines(a, yhat1, lwd=2)
L2 <- lm(magnetic ~ chemical + I(chemical^2))
plot(chemical, magnetic, main="Quadratic", pch=16)
yhat2 <- L2$coef[1] + L2$coef[2] * a + L2$coef[3] * a^2
lines(a, yhat2, lwd=2)
L3 <- lm(log(magnetic) ~ chemical)
plot(chemical, magnetic, main="Exponential", pch=16)
logyhat3 <- L3$coef[1] + L3$coef[2] * a
yhat3 <- exp(logyhat3)
lines(a, yhat3, lwd=2)
L4 <- lm(log(magnetic) ~ log(chemical))
plot(log(chemical), log(magnetic), main="Log-Log", pch=16)
logyhat4 <- L4$coef[1] + L4$coef[2] * log(a)
lines(log(a), logyhat4, lwd=2)
install.packages("DAAG")
par(ask = TRUE)
library(DAAG); attach(ironslag)
a <- seq(10, 40, .1) #sequence for plotting fits
L1 <- lm(magnetic ~ chemical)
plot(chemical, magnetic, main="Linear", pch=16)
lines(a, yhat1, lwd=2)
L2 <- lm(magnetic ~ chemical + I(chemical^2))
plot(chemical, magnetic, main="Quadratic", pch=16)
lines(a, yhat2, lwd=2)
L3 <- lm(log(magnetic) ~ chemical)
plot(chemical, magnetic, main="Exponential", pch=16)
yhat3 <- exp(logyhat3)
lines(a, yhat3, lwd=2)
L4 <- lm(log(magnetic) ~ log(chemical))
plot(log(chemical), log(magnetic), main="Log-Log", pch=16)
lines(log(a), logyhat4, lwd=2)
lines(log(a), logyhat4, lwd=2)
logyhat4 <- L4$coef[1] + L4$coef[2] * log(a)
lines(log(a), logyhat4, lwd=2)
par(ask = TRUE)
#Exercise 7.10
par(ask = TRUE)
library(DAAG); attach(ironslag)
a <- seq(10, 40, .1) #sequence for plotting fits
L1 <- lm(magnetic ~ chemical)
plot(chemical, magnetic, main="Linear", pch=16)
yhat1 <- L1$coef[1] + L1$coef[2] * a
lines(a, yhat1, lwd=2)
L2 <- lm(magnetic ~ chemical + I(chemical^2))
plot(chemical, magnetic, main="Quadratic", pch=16)
lines(a, yhat2, lwd=2)
yhat2 <- L2$coef[1] + L2$coef[2] * a + L2$coef[3] * a^2
lines(a, yhat2, lwd=2)
L3 <- lm(log(magnetic) ~ chemical)
plot(chemical, magnetic, main="Exponential", pch=16)
logyhat3 <- L3$coef[1] + L3$coef[2] * a
yhat3 <- exp(logyhat3)
lines(a, yhat3, lwd=2)
L4 <- lm(log(magnetic) ~ log(chemical))
plot(log(chemical), log(magnetic), main="Log-Log", pch=16)
logyhat4 <- L4$coef[1] + L4$coef[2] * log(a)
lines(log(a), logyhat4, lwd=2)
n <- length(magnetic)
e1 <- e2 <- e3 <- e4 <- numeric(n)
# for n-fold cross validation
# fit models on leave-one-out samples
for (k in 1:n) {
y <- magnetic[-k]
x <- chemical[-k]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[k]
e1[k] <- magnetic[k] - yhat1
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
e2[k] <- magnetic[k] - yhat2
J3 <- lm(log(y) ~ x)
logyhat3 <- J3$coef[1] + J3$coef[2] * chemical[k]
yhat3 <- exp(logyhat3)
e3[k] <- magnetic[k] - yhat3
J4 <- lm(log(y) ~ log(x))
logyhat4 <- J4$coef[1] + J4$coef[2] * log(chemical[k])
yhat4 <- exp(logyhat4)
e4[k] <- magnetic[k] - yhat4
}
c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
par(ask = FALSE)
plot
plot(chemical, magnetic, main="Linear", pch=16)
yhat1 <- L1$coef[1] + L1$coef[2] * a
lines(a, yhat1, lwd=2)
crossv <- c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
which(crossv == max(crossv), arr.ind = T)
which(crossv == min(crossv), arr.ind = T)
n <- length(magnetic)
e1 <- e2 <- e3 <- e4 <- numeric(n)
# fit models on leave-one-out samples
for (k in 1:n) {
y <- magnetic[-k]
x <- chemical[-k]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[k]
e1[k] <- magnetic[k] - yhat1
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
e2[k] <- magnetic[k] - yhat2
J3 <- lm(y ~ x + I(x^2) + I(x^3))
logyhat3 <- J3$coef[1] + J3$coef[2] * chemical[k]
yhat3 <- exp(logyhat3)
e3[k] <- magnetic[k] - yhat3
J4 <- lm(log(y) ~ x)
logyhat4 <- J4$coef[1] + J4$coef[2] * log(chemical[k])
yhat4 <- exp(logyhat4)
e4[k] <- magnetic[k] - yhat4
}
crossv <- c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
which(crossv == min(crossv), arr.ind = T)
library(DAAG); attach(ironslag) # get ironslag data
# for n-fold cross validation
n <- length(magnetic)
e1 <- e2 <- e3 <- e4 <- numeric(n)
# fit models on leave-one-out samples
for (k in 1:n) {
y <- magnetic[-k]
x <- chemical[-k]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[k]
e1[k] <- magnetic[k] - yhat1
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
e2[k] <- magnetic[k] - yhat2
J3 <- lm(y ~ x + I(x^2) + I(x^3))
yhat3 <- J3$coef[1] + J3$coef[2] * chemical[k] +
J3$coef[3] * chemical[k]^2 + J3$coef[4] * chemical[k]^3
e3[k] <- magnetic[k] - yhat3
J4 <- lm(log(y) ~ x)
logyhat4 <- J4$coef[1] + J4$coef[2] * chemical[k]
yhat4 <- exp(logyhat4)
e4[k] <- magnetic[k] - yhat4
}
crossv <- c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
which(crossv == min(crossv), arr.ind = T)
L1 <- lm(magnetic ~ chemical)
L2 <- lm(magnetic ~ chemical + I(chemical^2))
L3 <- lm(magnetic ~ chemical + I(chemical^2) + I(chemical^3))
L4 <- lm(log(magnetic) ~ chemical)
summary(L1)
L1$terms
L1$effects
L1$fitted.values
L1$qr
L1$residuals
L1$assign
L1$df.residual
L1$xlevels
L1$model
L1$terms
a <- summary(L1)
a$adj.r.squared
summary(L1,L2,L3,L4)
L1 <- summary(lm(magnetic ~ chemical))
L2 <- summary(lm(magnetic ~ chemical + I(chemical^2)))
L3 <- summary(lm(magnetic ~ chemical + I(chemical^2) + I(chemical^3)))
L4 <- summary(lm(log(magnetic) ~ chemical))
adj.r <-
c(L1$adj.r.squared,L2$adj.r.squared,L3$adj.r.squared,L4$adj.r.squared)
best.adj.ind <- which(adj.r == max(adj.r),arr.ind = T)
best.ind <- c(best.cross.ind, best.adj.ind)
names(best.ind) <- c('best.cross.ind', 'best.adj.ind')
print(best.ind)
library(DAAG); attach(ironslag) # get ironslag data
# for n-fold cross validation
n <- length(magnetic)
e1 <- e2 <- e3 <- e4 <- numeric(n)
# fit models on leave-one-out samples
for (k in 1:n) {
y <- magnetic[-k]
x <- chemical[-k]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[k]
e1[k] <- magnetic[k] - yhat1
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
e2[k] <- magnetic[k] - yhat2
J3 <- lm(y ~ x + I(x^2) + I(x^3))
yhat3 <- J3$coef[1] + J3$coef[2] * chemical[k] +
J3$coef[3] * chemical[k]^2 + J3$coef[4] * chemical[k]^3
e3[k] <- magnetic[k] - yhat3
J4 <- lm(log(y) ~ x)
logyhat4 <- J4$coef[1] + J4$coef[2] * chemical[k]
yhat4 <- exp(logyhat4)
e4[k] <- magnetic[k] - yhat4
}
crossv <- c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))
best.cross.ind <- which(crossv == min(crossv), arr.ind = T)
# fit models on adjusted quadratic R
L1 <- summary(lm(magnetic ~ chemical))
L2 <- summary(lm(magnetic ~ chemical + I(chemical^2)))
L3 <- summary(lm(magnetic ~ chemical + I(chemical^2) + I(chemical^3)))
L4 <- summary(lm(log(magnetic) ~ chemical))
adj.r <-
c(L1$adj.r.squared,L2$adj.r.squared,L3$adj.r.squared,L4$adj.r.squared)
best.adj.ind <- which(adj.r == max(adj.r),arr.ind = T)
best.ind <- c(best.cross.ind, best.adj.ind)
names(best.ind) <- c('best.cross.ind', 'best.adj.ind')
print(best.ind)
L2 <- summary(lm(magnetic ~ chemical + I(chemical^2)))
L2
